package application;

import databasePart1.DatabaseHelper;
import java.sql.*;

/**
 * The Answer class represents an answer to a question.
 * It provides CRUD operations to create, read, update, and delete answer records in the database.
 */
public class Answer implements Post{
    private int id;           // Unique identifier for the answer (generated by the database)
    private int questionId;   // ID of the question this answer is associated with
    private String content;   // The text/content of the answer
    private boolean answered;

    /**
     * Constructor for a new Answer (without an assigned ID yet).
     *
     * @param questionId The ID of the question to which this answer belongs.
     * @param content    The content of the answer.
     * @throws IllegalArgumentException if the content is null or empty.
     */
    public Answer(int questionId, String content, boolean answered) {
        if (!isValidContent(content)) {
            throw new IllegalArgumentException("Answer content cannot be empty.");
        }
        this.questionId = questionId;
        this.content = content;
        this.answered = answered;
    }

    /**
     * Constructor for an existing Answer (with a known ID).
     *
     * @param id         The unique ID of the answer.
     * @param questionId The ID of the associated question.
     * @param content    The content of the answer.
     * @throws IllegalArgumentException if the content is null or empty.
     */
    public Answer(int id, int questionId, String content, boolean answered) {
        if (!isValidContent(content)) {
            throw new IllegalArgumentException("Answer content cannot be empty.");
        }
        this.id = id;
        this.questionId = questionId;
        this.content = content;
        this.answered = answered;
    }

    /**
     * Validates the answer content.
     *
     * @param content The content to validate.
     * @return true if the content is not null or empty; false otherwise.
     */
    public boolean isValidContent(String content) {
        return content != null && !content.trim().isEmpty();
    }

    // -----------------------------
    // Getters and Setters
    // -----------------------------
    @Override
    public int getId() {
        return id;
    }
    
    public int getQuestionId() {
    	System.out.println(questionId);
        return questionId;
    }
    @Override
    public String getContent() {
        return content;
    }
    
    public boolean getAnswered() {
    	return answered;
    }

    /**
     * Updates the content of this answer.
     *
     * @param content The new content for the answer.
     * @throws IllegalArgumentException if the new content is null or empty.
     */
    public void setContent(String content) {
        if (!isValidContent(content)) {
            throw new IllegalArgumentException("Answer content cannot be empty.");
        }
        this.content = content;
    }

    // -----------------------------
    // CRUD Operations using DatabaseHelper
    // -----------------------------

    /**
     * Inserts this Answer into the database.
     *
     * @param dbHelper The DatabaseHelper instance providing the database connection.
     * @throws SQLException if an error occurs while inserting the answer.
     */
    @Override
    public void create(DatabaseHelper dbHelper) throws SQLException {
        String sql = "INSERT INTO Answers (questionId, content, answered) VALUES (?, ?, ?)";
        try (PreparedStatement pstmt = dbHelper.getConnection().prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            pstmt.setInt(1, this.questionId);
            pstmt.setString(2, this.content);
            pstmt.setBoolean(3,  this.answered);
            int affectedRows = pstmt.executeUpdate();
            if (affectedRows == 0) {
                throw new SQLException("Creating answer failed, no rows affected.");
            }
            // Retrieve the auto-generated key (id)
            try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    this.id = generatedKeys.getInt(1);
                } else {
                    throw new SQLException("Creating answer failed, no ID obtained.");
                }
            }
        }
    }

    /**
     * Reads an Answer from the database by its ID.
     *
     * @param dbHelper The DatabaseHelper instance providing the database connection.
     * @param answerId The ID of the answer to read.
     * @return An Answer object if found; otherwise, null.
     * @throws SQLException if an error occurs while querying the database.
     */
    public static Answer read(DatabaseHelper dbHelper, int answerId) throws SQLException {
        String sql = "SELECT id, questionId, content, answered FROM Answers WHERE id = ?";
        try (PreparedStatement pstmt = dbHelper.getConnection().prepareStatement(sql)) {
            pstmt.setInt(1, answerId);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    int id = rs.getInt("id");
                    int questionId = rs.getInt("questionId");
                    String content = rs.getString("content");
                    boolean answered = rs.getBoolean("answered");
                    return new Answer(id, questionId, content, answered);
                } else {
                    return null; // Answer not found
                }
            }
        }
    }

    /**
     * Updates this Answer's content in the database.
     *
     * @param dbHelper   The DatabaseHelper instance providing the database connection.
     * @param newContent The new content for the answer.
     * @throws SQLException if an error occurs during the update.
     */
    @Override
    public void update(DatabaseHelper dbHelper, String newContent) throws SQLException {
        if (!isValidContent(newContent)) {
            throw new IllegalArgumentException("New answer content cannot be empty.");
        }
        String sql = "UPDATE Answers SET content = ? WHERE id = ?";
        try (PreparedStatement pstmt = dbHelper.getConnection().prepareStatement(sql)) {
            pstmt.setString(1, newContent);
            pstmt.setInt(2, this.id);
            int affectedRows = pstmt.executeUpdate();
            if (affectedRows == 0) {
                throw new SQLException("Updating answer failed, no rows affected.");
            }
            this.content = newContent;
        }
    }
    
    public void updateAnswered(DatabaseHelper dbHelper, boolean answered) throws SQLException {
        
        String sql = "UPDATE Answers SET answered = ? WHERE id = ?";
        try (PreparedStatement pstmt = dbHelper.getConnection().prepareStatement(sql)) {
            pstmt.setBoolean(1, answered);
            pstmt.setInt(2, this.id);
            int affectedRows = pstmt.executeUpdate();
            if (affectedRows == 0) {
                throw new SQLException("Updating answered failed, no rows affected.");
            }
            this.answered = answered;
        }
    }

    /**
     * Deletes this Answer from the database.
     *
     * @param dbHelper The DatabaseHelper instance providing the database connection.
     * @throws SQLException if an error occurs during deletion.
     */
    @Override
    public void delete(DatabaseHelper dbHelper) throws SQLException {
        String sql = "DELETE FROM Answers WHERE id = ?";
        try (PreparedStatement pstmt = dbHelper.getConnection().prepareStatement(sql)) {
            pstmt.setInt(1, this.id);
            int affectedRows = pstmt.executeUpdate();
            if (affectedRows == 0) {
                throw new SQLException("Deleting answer failed, no rows affected.");
            }
        }
    }

    /**
     * Returns a string representation of the Answer.
     *
     * @return A string containing the answer's ID, associated question ID, and content.
     */
    @Override
    public String toString() {
        return "Answer [id=" + id + ", questionId=" + questionId + ", content=" + content + ", answered=" + answered + "]";
    }
}
